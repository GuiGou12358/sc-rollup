Hello,

We are glad to announce that we are part of the Ink!ubator 2.0 program to bring Verifiable Offchain Computing to ink! smart contracts.

This post will be used to keep the community informed about our development progress.

## Project Overview :page_facing_up:
### Overview

On-chain computation capabilities are inherently limited by blockchain design, which affects all smart contract platforms including ink!. Our project aims to complement ink! smart contracts by providing verifiable off-chain computing capabilities through Phala Cloud's Trusted Execution Environment (TEE), enabling developers to build more complex applications while maintaining blockchain security guarantees.

This solution bridges the gap between blockchain's security and off-chain computational power through:

1. A Professional SDK Suite
   - Enterprise-ready toolkit for seamless smart contract integration
   - Built-in ACID compliance for reliable state management
   - Production-grade security with TEE protection

2. Production-Ready Oracle Suite
   - Price Feed Oracle: Real-time market data integration from CoinGecko
   - VRF Oracle: Cryptographically secure random number generation
   - Graph API Oracle: Universal indexer connectivity (SubQuery, Subsquid, The Graph, ...)

3. Next-Generation AI Integration (Future implementation, outside of this grant)
   - Full Eliza OS integration for advanced AI capabilities
   - Direct LLM connectivity through Phala Cloud
   - Interactive proof-of-concept with Tic-Tac-Toe game

### Ink! Ecosystem Impact

Verifiable Offchain Computing is crucial for ink! smart contracts because it enables complex computations to be executed off-chain while ensuring their integrity and verifiability on-chain. Here's why it matters:

1. Interoperability with External Systems
   - Smart contracts often need to access external APIs, databases, and oracles.
   - Verifiable Offchain Computing ensures that off-chain data used in smart contracts is correct and tamper-proof.

2. Verifiable Computation
   - To ensure the integrity of off-chain computations, Remote Attestations are generated and Phala L2 Explorer tools simplify trustless verification.

3. Use Cases
   - Rollups: Off-chain execution with verification.
   - Oracles: Retrieve and verify off-chain data for smart contracts.
   - AI: Use AI/LLM in your ink! smart contracts

In summary, Verifiable Offchain Computing provides many benefits and use cases for dApps developed with ink! smart contracts.

### Project Details

#### SDK Details

The SDK will be designed to simplify the connection between smart contracts and dApps deployed on Phala Cloud. 
Its primary goal is to enable transactional and atomic cross-blockchain operations, ensuring seamless integration and interaction.

##### The Challenge
Developing dApps that interact with blockchains can be a common but challenging task, especially when it comes to handling concurrency issues in off-chain programs. 
Without a proper synchronization mechanism, this may end up conflicting between the contracts and dApp deployed on Phala Cloud.

Consider a real-world scenario: a smart contract distributes computation tasks to workers. These workers compete with each other when claiming tasks from the blockchain. Ideally, each task should only be claimed once. However, without coordination among the workers, they might send transactions simultaneously to claim the same task, resulting in inconsistent smart contract states.

Consistent state management is crucial when developing an application that communicates with a blockchain. Developers need a reliable and transactional way to perform operations, where read and write tasks are combined into a single unit and executed atomically on the blockchain. This approach aligns with the ACID principle found in transactional database management systems.

The sdk is here to simplify development by providing a stable, ACID-compliant connection with ink! smart contracts. This eliminates concurrency issues and enables a request-response programming model for seamless interaction between the workers and on-chain smart contracts.

##### Key Benefits
- Seamless connectivity between ink! smart contracts and workers
- Reliable KV-store on blockchains for durable state management
- Transactional (ACID) on-chain KV-store designed for stateful dApps deployed on Phala Cloud
- ACID-compliant read, write, and contract call operations for consistent data handling
- Request-response programming model that simplifies interactions between worker and on-chain smart contracts

##### Architectural Diagram

Ink! smart contracts, built with ink! v6, will be deployed on `pallet-revive` and an application, built on js/ts and using PAPI sdk, will be deployed on Phala Cloud.

Websocket and http requests will be used to communicate between the ink! smart contracts and the application on Phala Cloud.

Our sdk will manage the synchronization mechanism and the developers would have a reliable and transactional way to perform operations, where read and write tasks are combined into a single unit and executed atomically on the blockchain.

The SDK will be divided into two parts:
- the client will be integrated as a Rust library within ink! smart contracts.
- the rollup will be integrated as a JavaScript library within applications deployed on Phala Cloud.

![communication-contracts.png](https://github.com/use-inkubator/Ecosystem-Grants/tree/47af88c038a3ba9f936208685e4e4bd26fe4f5be/assets/verifiable_offchain_computing/communication-contracts.png)


You can find all the information about the project [here](https://github.com/use-inkubator/Ecosystem-Grants/blob/47af88c038a3ba9f936208685e4e4bd26fe4f5be/applications/verifiable_offchain_computing.md) 
